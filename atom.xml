<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://shumild.github.io</id>
    <title>shumild</title>
    <updated>2022-01-23T16:00:38.743Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://shumild.github.io"/>
    <link rel="self" href="https://shumild.github.io/atom.xml"/>
    <subtitle>这是一个正在学习中的大三菜鸟</subtitle>
    <logo>https://shumild.github.io/images/avatar.png</logo>
    <icon>https://shumild.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, shumild</rights>
    <entry>
        <title type="html"><![CDATA[初识 Ajax]]></title>
        <id>https://shumild.github.io/post/chu-shi-ajax/</id>
        <link href="https://shumild.github.io/post/chu-shi-ajax/">
        </link>
        <updated>2022-01-23T15:01:45.000Z</updated>
        <content type="html"><![CDATA[<h1 id="了解ajax">了解Ajax</h1>
<h2 id="什么是ajax">什么是Ajax</h2>
<p>Ajax全称是Asynchronous Javascript And XML（异步JavaScript 和 XML）。</p>
<p>通俗的理解：在网页中利用XMLHttpRequest 对象和服务器进行 数据交互的方式，就是Ajax。</p>
<h2 id="为什么要学ajax">为什么要学Ajax</h2>
<p><strong>Ajax</strong>能让我们轻松实现<strong>网页</strong>与<strong>服务器</strong>之间的<strong>数据交互</strong></p>
<h1 id="jquery中的ajax">jQuery中的Ajax</h1>
<h2 id="了解jquery中的ajax">了解jQuery中的Ajax</h2>
<p>浏览器中提供的<strong>XMLHttpRequest用法比较复杂</strong>，所以jQuery对XMLHttpRequest进行了封装，提供了一系列Ajax相关的函数，极大地<strong>降低了Ajax的使用难度</strong>。</p>
<p>jQuery中发起Ajax请求最常用的三个方法：</p>
<ul>
<li><strong>$.get()</strong></li>
<li><strong>$.post()</strong></li>
<li><strong>$.ajax()</strong></li>
</ul>
<h2 id="get函数的语法">$.get()函数的语法</h2>
<p>jQuery中<code>$.get()</code>函数的功能单一，专门用来发起get请求，从而将服务器上的资源请求到客户端来进行使用。</p>
<p>$.get()函数的语法如下：</p>
<pre><code class="language-javascript">$.get(url,[data],[callback])
</code></pre>
<p>其中，三个参数各自代表的含义如下：</p>
<table>
<thead>
<tr>
<th>参数名</th>
<th>参数类型</th>
<th>是否必选</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>url</strong></td>
<td><strong>string</strong></td>
<td><strong>是</strong></td>
<td>要请求的<strong>资源地址</strong></td>
</tr>
<tr>
<td>data</td>
<td>object</td>
<td>否</td>
<td>请求资源期间要<strong>携带的参数</strong></td>
</tr>
<tr>
<td>callback</td>
<td>function</td>
<td>否</td>
<td>请求成功时的<strong>回调函数</strong></td>
</tr>
</tbody>
</table>
<h2 id="get发起不带参数的请求">$.get()发起不带参数的请求</h2>
<p>使用<code>$.get()</code>函数发起不带参数的请求时，直接提供请求的URL地址和请求成功之后的回调函数即可，示例代码如下：</p>
<pre><code class="language-javascript">$.get('http://www.liulongbin.top:3006/api/getbooks',function(res){
    console.log(res)//这里的res是服务器返回的数据
})
</code></pre>
<p><img src="https://shumild.github.io/post-images/1642951861423.png" alt="" loading="lazy">C:\Users\shumild\AppData\Roaming\Typora\typora-user-images\image-20220114225642450.png)</p>
<h2 id="get发起带参数的请求">$.get()发起带参数的请求</h2>
<p>使用<code>$.get()</code>函数发起带参数的请求时，示例代码如下：</p>
<pre><code class="language-javascript">$.get('http://www.liulongbin.top:3006/api/getbooks',{id:1},function(res){
    console.log(res)
})
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://shumild.github.io/post-images/1642951912044.png" alt="" loading="lazy"></figure>
<h2 id="post函数的语法">$.post()函数的语法</h2>
<p>jQuery中<code>$.post()</code>函数功能单一，专门用来发起post请求，从而向服务器提交数据。</p>
<p>$.post()函数的语法如下：</p>
<pre><code class="language-javascript">$.post(url,[data],[callback])
</code></pre>
<p>其中，三个参数各自代表的含义如下：</p>
<table>
<thead>
<tr>
<th>参数名</th>
<th>参数类型</th>
<th>是否必选</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>url</strong></td>
<td><strong>string</strong></td>
<td><strong>是</strong></td>
<td><strong>提交数据的地址</strong></td>
</tr>
<tr>
<td>data</td>
<td>object</td>
<td>否</td>
<td><strong>要提交的数据</strong></td>
</tr>
<tr>
<td>callback</td>
<td>function</td>
<td>否</td>
<td>数据提交成功时的<strong>回调函数</strong></td>
</tr>
</tbody>
</table>
<h2 id="post向服务器提交数据">$.post()向服务器提交数据</h2>
<p>使用$.post()向服务器提交数据的示例代码如下：</p>
<pre><code class="language-javascript">$.post('http://www.liulongbin.top:3006/api/addbook', //请求的URL地址
       {bookname:'水浒传',author:'施耐庵',publisher:'上海图书出版社'}, //提交的数据
      function(res){ //回调函数
    console.log(res)
})
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://shumild.github.io/post-images/1642952086210.png" alt="" loading="lazy"></figure>
<h2 id="ajax函数的语法">$.ajax()函数的语法</h2>
<p>相比于<code>$.get()</code>和<code>$.post()</code>函数，jQuery中提供的<code>$.ajax()</code>函数，是一个功能比较综合的函数，它允许我们对Ajax请求进行更详细的配置。</p>
<p>$.ajax()函数配置基本语法如下：</p>
<pre><code class="language-javascript">$.ajax({
    type:'', // 请求的方式，例如 GET 或 POST
    url:'', // 请求 URL 地址
    data:{ }, // 这次请求要携带的数据
    success:function(res){ } // 请求成功之后的回调函数
})
</code></pre>
<h2 id="使用ajax发起get请求">使用$.ajax()发起GET请求</h2>
<p>使用<code>$.ajax()</code>发起GET请求时，只需要将<strong>type属性</strong>的值设置为 ‘ <strong>GET</strong> ’ 即可：</p>
<pre><code class="language-javascript">$.ajax({
    type:'GET', // 请求的方式
    url:'http://www.liulongbin.top:3006/api/getbooks', // 请求 URL 地址
    data:{id:1}, // 这次请求要携带的数据
    success:function(res){ // 请求成功之后的回调函数
        console.log(res)
    } 
})
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://shumild.github.io/post-images/1642952132798.png" alt="" loading="lazy"></figure>
<h2 id="使用ajax发起post请求">使用$.ajax()发起POST请求</h2>
<p>使用<code>$.ajax()</code>发起POST请求时，只需将<strong>type属性</strong>的值设置为 ‘ <strong>POST</strong> ’ 即可：</p>
<pre><code class="language-javascript">$.ajax({
    type:'POST', // 请求的方式
    url:'http://www.liulongbin.top:3006/api/addbook', // 请求 URL 地址
    data:{ // 要提交给服务器的数据
        bookname:'水浒传',
        author:'施耐庵',
        publisher:'上海图书出版社'
    }, 
    success:function(res){ // 请求成功之后的回调函数
        console.log(res)
    }
})
</code></pre>
<figure data-type="image" tabindex="4"><img src="https://shumild.github.io/post-images/1642952152789.png" alt="" loading="lazy"></figure>
<h1 id="接口">接口</h1>
<h2 id="接口的概念">接口的概念</h2>
<p>使用Ajax请求数据时，被请求的URL地址，就叫做数据接口（简称接口）。同时，每个接口必须有请求方式。</p>
<p>例如：</p>
<blockquote>
<p>http://www.liulongbin.top:3006/api/getbooks 			获取图书列表的接口（GET请求）</p>
</blockquote>
<blockquote>
<p>http://www.liulongbin.top:3006/api/addbooks			添加图书的接口（POST请求）</p>
</blockquote>
<h2 id="分析接口的请求过程">分析接口的请求过程</h2>
<h3 id="1通过get方式请求接口的过程">1.通过GET方式请求接口的过程</h3>
<figure data-type="image" tabindex="5"><img src="https://shumild.github.io/post-images/1642952219056.png" alt="" loading="lazy"></figure>
<h3 id="2通过post方式请求接口的过程">2.通过POST方式请求接口的过程</h3>
<figure data-type="image" tabindex="6"><img src="C:%5CUsers%5Cshumild%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220115003959960.png" alt="image-20220115003959960" loading="lazy"></figure>
<h2 id="接口测试工具">接口测试工具</h2>
<h3 id="1什么是接口测试工具">1.什么是接口测试工具</h3>
<p>为了验证接口能否被正常访问，我们常常需要使用接口测试工具，来对数据接口进行检测。</p>
<p><strong>好处</strong>：接口测试工具能让我们在<strong>不写任何代码</strong>的情况下，对接口进行<strong>调用</strong>与<strong>测试</strong>。</p>
<h3 id="2下载并安装postman">2.下载并安装PostMan</h3>
<p>访问PostMan的官方下载网址https://www.getpostman.com/downloads/，下载所需的安装程序后，直接安装即可。</p>
<h3 id="3了解postman界面的组成部分">3.了解PostMan界面的组成部分</h3>
<p>PostMan界面的组成部分，从上到下，从左到右，分别是：</p>
<figure data-type="image" tabindex="7"><img src="https://shumild.github.io/post-images/1642952239618.png" alt="" loading="lazy"></figure>
<h3 id="4使用postman测试get接口">4.使用PostMan测试GET接口</h3>
<p>步骤：</p>
<ol>
<li>选择请求的方式</li>
<li>填写请求的URL地址</li>
<li>填写请求的参数</li>
<li>点击Send按钮发起GET请求</li>
<li>查看服务器响应的结果</li>
</ol>
<figure data-type="image" tabindex="8"><img src="https://shumild.github.io/post-images/1642952256470.png" alt="" loading="lazy"></figure>
<h3 id="5使用postman测试post接口">5.使用PostMan测试POST接口</h3>
<p>步骤：</p>
<ol>
<li>选择请求的方式</li>
<li>填写请求的URL地址</li>
<li>选择Body面板并<strong>勾选数据格式</strong></li>
<li>填写要发送到服务器的数据</li>
<li>点击Send按钮发起POST请求</li>
<li>查看服务器响应的结果</li>
</ol>
<figure data-type="image" tabindex="9"><img src="https://shumild.github.io/post-images/1642952273759.png" alt="" loading="lazy"></figure>
<h2 id="接口文档">接口文档</h2>
<h3 id="1什么是接口文档">1.什么是接口文档</h3>
<p>接口文档，顾名思义就是<strong>接口的说明文档</strong>，它是我们<strong>调用接口的依据</strong>。好的接口文档包含了对<strong>接口URL</strong>，<strong>参数</strong>以及<strong>输出内容</strong>的说明，我们参照接口文档就能方便的知道接口的作用，如何进行调用。</p>
<h3 id="2接口文档的组成部分">2.接口文档的组成部分</h3>
<p>接口文档可以包含很多信息，也可以按需进行精简，不过，一个合格的接口文档，应该包含以下6项内容，从而为接口的调用提供依据：</p>
<ol>
<li><strong>接口名称</strong>：用来标识各个接口的简单说明，如<strong>登录接口</strong>，<strong>获取图书列表接口</strong>等。</li>
<li><strong>接口 URL</strong>：接口的调用地址。</li>
<li><strong>调用方式</strong>：接口的调用方式，如 <strong>GET</strong> 或 <strong>POST</strong>。</li>
<li><strong>参数格式</strong>：接口需要传递的参数，每个参数必须包含<strong>参数名称</strong>、<strong>参数类型</strong>、<strong>是否必选</strong>、<strong>参数说明</strong>这4项内容。</li>
<li><strong>响应格式</strong>：接口的返回值的详细描述，一般包括<strong>数据名称</strong>、<strong>数据类型</strong>、<strong>说明</strong>3项内容。</li>
<li>返回示例（可选）：通过对象的形式，列举服务器返回数据的结构。</li>
</ol>
<h3 id="3接口文档示例">3.接口文档示例</h3>
<figure data-type="image" tabindex="10"><img src="https://shumild.github.io/post-images/1642952299072.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="11"><img src="https://shumild.github.io/post-images/1642952315461.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://shumild.github.io/post/hello-gridea/</id>
        <link href="https://shumild.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>